
-- Let us attempt to predict a cityâ€™s population by fitting a line y = ax + b
-- to the y=population, x=year data per city.


-- y = ax + b
-- PostgreSQL has aggregation functions to find a best-fitting line approximation
-- to a set of x coordinates X and y coordinates Y: regr_slope(Y, X) (gives a),
-- regr_intercept(Y, X) (gives b) and the degree of determination r2 measures how
-- closely the data follows a linear trend r2 = regr_r2(Y, X) (1 = data follows
-- linear trend, 0 does not follow linear trend at all).


-- Create a new virtual view LinearPrediction(cityname, country a, b, r2,
-- nsamples, yearfrom, yearto, minpop, maxpop) with these quantities for each
-- city as well as:
-- nsamples: the number of population years in which data exists per city
-- yearfrom, yearto: min and max year for which we have data
-- minpop, maxpop: observed min and max population for the city


-- SELECT city AS cityname, country, regr_slope(population, year) AS a,
--        regr_intercept(population, year) AS b, regr_r2(population, year) AS r2,
--        COUNT(year) AS nsamples, MIN(year) AS yearfrom, MAX(year) AS yearto,
--        MIN(population) AS minpop, MAX(population) AS maxpop
-- FROM citypops
-- GROUP BY city, country
-- LIMIT 20;


CREATE MATERIALIZED VIEW LinearPrediction AS
(
  SELECT city AS cityname, country, regr_slope(population, year) AS a,
         regr_intercept(population, year) AS b, regr_r2(population, year) AS r2,
         COUNT(year) AS nsamples, MIN(year) AS yearfrom, MAX(year) AS yearto,
         MIN(population) AS minpop, MAX(population) AS maxpop
  FROM citypops
  GROUP BY city, country
);
